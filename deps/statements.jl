isdefined(GitHub, Symbol("##github_request#3")) && precompile(Tuple{getfield(GitHub, Symbol("##github_request#3")), GitHub.AnonymousAuth, Bool, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Bool, typeof(GitHub.github_request), GitHub.GitHubWebAPI, typeof(identity), String})
isdefined(GitHub, Symbol("##github_request#3")) && precompile(Tuple{getfield(GitHub, Symbol("##github_request#3")), GitHub.OAuth2, Bool, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Bool, typeof(GitHub.github_request), GitHub.GitHubWebAPI, typeof(identity), String})
isdefined(GitHub, Symbol("##repo#60")) && precompile(Tuple{getfield(GitHub, Symbol("##repo#60")), Base.Iterators.Pairs{Symbol, GitHub.OAuth2, Tuple{Symbol}, NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}}, typeof(GitHub.repo), GitHub.GitHubWebAPI, String})
isdefined(GitHub, Symbol("##s23#23")) && precompile(Tuple{getfield(GitHub, Symbol("##s23#23")), Int, Int, Int, Int})
isdefined(GitHub, Symbol("#iscollaborator##kw")) && precompile(Tuple{getfield(GitHub, Symbol("#iscollaborator##kw")), NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}, typeof(GitHub.iscollaborator), GitHub.Repo, Base.SubString{String}})
precompile(Tuple{typeof(GitHub.__init__)})
precompile(Tuple{typeof(GitHub.prune_github_value), Base.Dict{String, Any}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(GitHub.prune_github_value), Base.Dict{String, Any}, Type{GitHub.Owner}})
precompile(Tuple{typeof(GitHub.prune_github_value), String, Type{Dates.DateTime}})
precompile(Tuple{typeof(GitHub.prune_github_value), String, Type{HTTP.URIs.URI}})
precompile(Tuple{typeof(GitHub.unwrap_union_types), Union})
isdefined(StringDistances, Symbol("#compare##kw")) && precompile(Tuple{getfield(StringDistances, Symbol("#compare##kw")), NamedTuple{(:min_score,), Tuple{Float64}}, typeof(StringDistances.compare), String, String, StringDistances.Overlap})
precompile(Tuple{typeof(Mustache.falsy), Bool})
precompile(Tuple{typeof(Mustache.falsy), Int64})
precompile(Tuple{typeof(Mustache.falsy), Mustache.SectionToken})
precompile(Tuple{typeof(Mustache.falsy), Mustache.TagToken})
precompile(Tuple{typeof(Mustache.falsy), Mustache.TextToken})
precompile(Tuple{typeof(Mustache.falsy), PkgTemplates.Secret})
precompile(Tuple{typeof(Mustache.falsy), String})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Bool, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), PkgTemplates.Secret, String})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens})
precompile(Tuple{typeof(Mustache.renderTokensByValue), Array{String, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokensByValue), Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokensByValue), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokensByValue), PkgTemplates.Secret, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
isdefined(LibGit2, Symbol("#fetch##kw")) && precompile(Tuple{getfield(LibGit2, Symbol("#fetch##kw")), NamedTuple{(:remoteurl, :callbacks, :refspecs), Tuple{Base.SubString{String}, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, Array{String, 1}}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.commit), LibGit2.GitRepo, String, String, LibGit2.GitSignature, LibGit2.GitSignature, LibGit2.GitTree, LibGit2.GitCommit})
precompile(Tuple{typeof(LibGit2.credentials_callback), Ptr{Ptr{Nothing}}, Base.Cstring, Base.Cstring, UInt32, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
isdefined(Base, Symbol("##all#638")) && precompile(Tuple{getfield(Base, Symbol("##all#638")), typeof(identity), typeof(Base.all), typeof(identity), Array{Int64, 1}})
isdefined(Base, Symbol("##any#636")) && precompile(Tuple{getfield(Base, Symbol("##any#636")), typeof(identity), typeof(Base.any), typeof(identity), Array{PkgTemplates.Plugin, 1}})
isdefined(Base, Symbol("##mapfoldl#204")) && precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
isdefined(Base, Symbol("##mapfoldl#204")) && precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
isdefined(Base, Symbol("##mapfoldl#204")) && precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
isdefined(Base, Symbol("##mapfoldl#204")) && precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
isdefined(Base, Symbol("##mapfoldl#204")) && precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
isdefined(Base, Symbol("##printstyled#746")) && precompile(Tuple{getfield(Base, Symbol("##printstyled#746")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
isdefined(Base, Symbol("##printstyled#746")) && precompile(Tuple{getfield(Base, Symbol("##printstyled#746")), Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, String})
isdefined(Base, Symbol("##printstyled#747")) && precompile(Tuple{getfield(Base, Symbol("##printstyled#747")), Bool, Symbol, typeof(Base.printstyled), String, String})
isdefined(Base, Symbol("##printstyled#747")) && precompile(Tuple{getfield(Base, Symbol("##printstyled#747")), Bool, Symbol, typeof(Base.printstyled), String})
isdefined(Base, Symbol("##readuntil#289")) && precompile(Tuple{getfield(Base, Symbol("##readuntil#289")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.readuntil), Base.Process, Char})
isdefined(Base, Symbol("##s91#155")) && precompile(Tuple{getfield(Base, Symbol("##s91#155")), Int, Int, Int, Int, Int})
isdefined(Base, Symbol("##sprint#355")) && precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), typeof(identity), Array{Documenter.Writers.HTMLWriter.SearchRecord, 1}})
isdefined(Base, Symbol("##sprint#355")) && precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), typeof(identity), Base.Dict{String, Any}, Int})
isdefined(Base, Symbol("##sprint#355")) && precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), typeof(identity), Base.Dict{Symbol, Any}, Int})
isdefined(Base, Symbol("##sprint#355")) && precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), typeof(identity), Markdown.Paragraph})
isdefined(Base, Symbol("##sprint#355")) && precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), typeof(identity), String, String})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, String, String})
isdefined(Base, Symbol("##with_output_color#745")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, String})
isdefined(Base, Symbol("#parse##kw")) && precompile(Tuple{getfield(Base.Meta, Symbol("#parse##kw")), NamedTuple{(:raise,), Tuple{Bool}}, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.TTY, String, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
isdefined(Base, Symbol("#printstyled##kw")) && precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
isdefined(Base, Symbol("#sort##kw")) && precompile(Tuple{getfield(Base, Symbol("#sort##kw")), NamedTuple{(:by,), Tuple{typeof(Base.string)}}, typeof(Base.sort), Array{Any, 1}})
isdefined(Base, Symbol("#sprint##kw")) && precompile(Tuple{getfield(Base, Symbol("#sprint##kw")), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.sprint), typeof(identity), String})
isdefined(Base, Symbol("#with_output_color##kw")) && precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
isdefined(Base, Symbol("#with_output_color##kw")) && precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Pkg.Types.VersionSpec, Base.VersionNumber})
precompile(Tuple{typeof(Base.:(==)), Symbol, Bool})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Documenter.Utilities.Markdown2._convert_block), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(GitHub.unwrap_union_types), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(GitHub.unwrap_union_types), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(GitHub.unwrap_union_types), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), typeof(identity), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, AbstractString})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Any, 1}, Int})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, IonBase.ComoniconFiles, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.CompatHelper, IonBase.ComoniconFiles})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.CompatHelper, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Git, PkgTemplates.CompatHelper})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Git, PkgTemplates.ProjectFile})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Git, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Git, PkgTemplates.SrcDir})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.License, PkgTemplates.Git})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.License, PkgTemplates.ProjectFile})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.License, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.License, PkgTemplates.SrcDir})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.ProjectFile, PkgTemplates.CompatHelper})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.ProjectFile, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Readme, PkgTemplates.ProjectFile})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Readme, PkgTemplates.SrcDir})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.SrcDir, PkgTemplates.ProjectFile})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.SrcDir, PkgTemplates.Readme})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.TagBot, PkgTemplates.SrcDir})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.TagBot, PkgTemplates.Tests})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, PkgTemplates.Tests, PkgTemplates.SrcDir})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.string), Base.Order.ForwardOrdering}, Type{Int}, Type{Int}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Documenter.Utilities.Selectors.order), Base.Order.ForwardOrdering}, Type{Int}, Type{Int}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Float64, Float64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Float64, Float64})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Int64}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._array_for), Type{Array{Array{Documenter.Utilities.DOM.Node, 1}, 1}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Documenter.Utilities.DOM.Node, 1}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Documenter.Utilities.DOM.Node}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Module, 1}, Array{Base.Pair{String, String}, 1}, String, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{String, Base.Dict{String, Documenter.Documents.Page}}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Array{String, 1}}, Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{typeof(Base.Multimedia.display), Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Markdown.Footnote, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, GitHub.OAuth2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool, Bool, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Array{PkgTemplates.Plugin, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, String, String, Bool, String, String}}})
precompile(Tuple{typeof(Base._mapreduce), typeof(PkgTemplates.gitignore), typeof(Base.vcat), Base.IndexLinear, Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Documenter.Utilities.Markdown2.CodeBlock}, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Documenter.Utilities.Markdown2.Heading}, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Documenter.Utilities.Markdown2.Paragraph}, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Markdown.Code}, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Markdown.MD}, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Markdown.Paragraph}, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{LibGit2.GitAnnotated, 1}, Type{Nothing}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{PkgTemplates.Plugin, 1}, Type{DataType}, Base.Generator{Array{PkgTemplates.Plugin, 1}, typeof(typeof)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._spawn), Base.Cmd, Array{Any, 1}, Base.ProcessChain})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, Array{String, 1}}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{String, Integer}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{typeof(Base.all), typeof(identity), Array{Int64, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Nothing, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Docs.Binding}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Set{Type}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataType}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Documents.ContentsNode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Documents.DocsNode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Documents.IndexNode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Documents.NavNode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.DOM.Node}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.JSDependencies.Snippet}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.Markdown2.CodeBlock}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.Markdown2.Heading}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.Markdown2.MarkdownBlockNode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Utilities.Markdown2.Paragraph}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Documenter.Writers.HTMLWriter.SearchRecord}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Markdown.Footnote}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Markdown.Paragraph}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Mustache.Token}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PkgTemplates.Plugin}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Type}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Regex, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Documenter.Documents.DocsNode, Markdown.Admonition}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Base.any), typeof(identity), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.bytesavailable), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.check_open), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.close), LibGit2.GitConfigIter})
precompile(Tuple{typeof(Base.collect), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.collect), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Filesystem.normpath)}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(Base.strip)}})
precompile(Tuple{typeof(Base.collect_similar), Array{PkgTemplates.Plugin, 1}, Base.Generator{Array{PkgTemplates.Plugin, 1}, typeof(typeof)}})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{Int}, Base.Generator{Array{PkgTemplates.Plugin, 1}, typeof(typeof)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Documenter.Utilities.Markdown2.CodeBlock, 1}, Documenter.Utilities.Markdown2.CodeBlock, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Documenter.Utilities.Markdown2.Heading, 1}, Documenter.Utilities.Markdown2.Heading, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Documenter.Utilities.Markdown2.Paragraph, 1}, Documenter.Utilities.Markdown2.Paragraph, Base.Generator{Array{Any, 1}, typeof(Documenter.Utilities.Markdown2._convert_block)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.Code, 1}, Markdown.Code, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.MD, 1}, Markdown.MD, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.Paragraph, 1}, Markdown.Paragraph, Base.Generator{Array{Any, 1}, typeof(Documenter.Writers.MarkdownWriter.dropheaders)}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Array{Base.Dict{Any, Any}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SecretBuffer}}, Base.SecretBuffer})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Documenter.Utilities.Markdown2._convert_block), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(GitHub.unwrap_union_types), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Artifacts.artifact_exists), Tuple{Array{Base.SHA1, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Pair{String, String}, String, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Symbol, Symbol, Bool}})
precompile(Tuple{typeof(Base.copyto!), Array{PkgTemplates.Plugin, 1}, Tuple{PkgTemplates.Readme, IonBase.ComoniconFiles}})
precompile(Tuple{typeof(Base.deepcopy_internal), Int, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Base.Docs.Binding, Base.Set{Type}}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.delete!), Base.Set{Type}, Type{Int}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Base.UUID}, Type{Pkg.Types.PackageInfo}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Nothing}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Nothing}, Type{String}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Union{Nothing, String}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Any}, Type{Any}})
precompile(Tuple{typeof(Base.empty), OrderedCollections.OrderedDict{Any, Any}, Type{String}, Type{Bool}})
precompile(Tuple{typeof(Base.empty), OrderedCollections.OrderedDict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.empty), OrderedCollections.OrderedDict{String, Bool}, Type{String}, Type{Integer}})
precompile(Tuple{typeof(Base.empty), OrderedCollections.OrderedDict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.eof), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(Base.final_shred!), Base.SecretBuffer})
precompile(Tuple{typeof(Base.findfirst), typeof(identity), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.first), Array{Documenter.Utilities.DOM.Node, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Pkg.Operations, Symbol("#visit#70")){Pkg.Types.Context, Base.Dict{Base.UUID, Int64}, Array{Base.UUID, 1}}, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.get!), typeof(identity), Base.Dict{String, Base.Dict{String, Array{Documenter.Anchors.Anchor, 1}}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{PkgTemplates.Plugin, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Type, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.Docs.Binding, Base.Set{Type}}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Module, Int64}, Module})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), Documenter.Utilities.DOM.Tag, String, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Base.getproperty), Base.Docs.Binding, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Docs.DocStr, Symbol})
precompile(Tuple{typeof(Base.getproperty), Documenter.Utilities.DOM.Node, Symbol})
precompile(Tuple{typeof(Base.getproperty), Documenter.Utilities.Object, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.Header{1}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.Header{2}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.MD, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.Paragraph, Symbol})
precompile(Tuple{typeof(Base.getproperty), Mustache.Context, Symbol})
precompile(Tuple{typeof(Base.getproperty), Mustache.SectionToken, Symbol})
precompile(Tuple{typeof(Base.getproperty), Mustache.TagToken, Symbol})
precompile(Tuple{typeof(Base.getproperty), Mustache.TextToken, Symbol})
precompile(Tuple{typeof(Base.getproperty), Sockets.TCPSocket, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{typeof(Base.Multimedia.display), Bool}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Array{String, 1}}, Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{String, 1}}, Tuple{Base.Pair{String, Array{String, 1}}, Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Nothing}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{typeof(Base.Multimedia.display), Bool}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), OrderedCollections.OrderedDict{String, Any}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), OrderedCollections.OrderedDict{String, Bool}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), OrderedCollections.OrderedDict{String, Integer}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), OrderedCollections.OrderedDict{String, String}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.hash), Tuple{String}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.Docs.Binding, Base.Set{Type}}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Module, Int64}, Module})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{DataType, Nothing}, Type{Int}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, typeof(identity)})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Nothing}, Type{Int}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Type, Nothing}, Type{Int}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String}, Tuple{String}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.in), String, Tuple{String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol}})
precompile(Tuple{typeof(Base.in), String, Tuple{}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{}})
precompile(Tuple{typeof(Base.in), Type{Int}, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), Type{Int}, Base.Set{Type}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, Array{String, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, Base.UUID}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, Base.UUID}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, String}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.UUID}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.UUID}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.VersionNumber}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Base.VersionNumber}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, String}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Module, String, Symbol, Documenter.Utilities.Object, Bool, Base.Docs.DocStr}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Module, String, Symbol, Documenter.Utilities.Object, Bool, Base.Docs.DocStr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Pkg.Types.RegistrySpec, Base.Dict{String, Any}, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Pkg.Types.RegistrySpec, Base.Dict{String, Any}, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Pkg.Types.RegistrySpec, Base.Dict{String, Any}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Pkg.Types.RegistrySpec, Base.Dict{String, Any}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.isabstracttype), Int})
precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.iterate), Array{Module, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Module, 1}})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Any, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt32, UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.map), Documenter.Utilities.DOM.Tag, Array{Array{Array{Documenter.Utilities.DOM.Node, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.map), Documenter.Utilities.DOM.Tag, Array{Array{Documenter.Utilities.DOM.Node, 1}, 1}})
precompile(Tuple{typeof(Base.map), typeof(identity), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.map), typeof(identity), Array{Documenter.Documents.NavNode, 1}})
precompile(Tuple{typeof(Base.map), typeof(identity), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.map), typeof(identity), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Base.Docs.DocStr, 1}}}})
precompile(Tuple{typeof(Base.mapreduce), typeof(identity), typeof(identity), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{typeof(Base.match), Base.Regex, Base.SubString{String}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Union{Nothing, String}}, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(Base.merge!), OrderedCollections.OrderedDict{String, Any}, OrderedCollections.OrderedDict{String, String}})
precompile(Tuple{typeof(Base.merge!), OrderedCollections.OrderedDict{String, Integer}, OrderedCollections.OrderedDict{String, Bool}})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Nothing, Bool, Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Nothing, Bool, Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:format,), Tuple{Documenter.Writers.HTMLWriter.HTML}}}, Type{NamedTuple{(:modules, :pages, :repo, :sitename), Tuple{Array{Module, 1}, Array{Base.Pair{String, String}, 1}, String, String}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}, Type{NamedTuple{(:redirect, :status_exception, :idle_timeout, :parent), Tuple{Bool, Bool, Int64, HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception), Tuple{Nothing, Bool, Bool, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}, Type{NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:redirect, :status_exception, :idle_timeout, :parent), Tuple{Bool, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:manifest, :update_registry, :verbose), Tuple{Nothing, Bool, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:droplinks,), Tuple{Bool}}}, Type{NamedTuple{(:footnotes,), Tuple{Array{Markdown.Footnote, 1}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:handle_error,), Tuple{Bool}}}, Type{NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:cleanup,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.min), UInt64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Module, Char, Int})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, PkgTemplates.Secret})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.VersionNumber, Int})
precompile(Tuple{typeof(Base.print), Base.IOStream, Char})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Int})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, Symbol, Int})
precompile(Tuple{typeof(Base.print), Base.IOStream, Symbol})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64})
precompile(Tuple{typeof(Base.print), JSON.Writer.StringContext{JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Symbol})
precompile(Tuple{typeof(Base.print), JSON.Writer.StringContext{JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, typeof(identity)})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Resolve.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, String}, String, Int})
precompile(Tuple{typeof(Base.push!), Array{Base.Pair{Symbol, String}, 1}, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Base.push!), Array{Documenter.Utilities.Object, 1}, Documenter.Utilities.Object})
precompile(Tuple{typeof(Base.push!), Base.Set{Base.VersionNumber}, Base.VersionNumber})
precompile(Tuple{typeof(Base.push!), Base.Set{DataType}, Type{Int}})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TagToken})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{typeof(Base.readuntil), Base.PipeEndpoint, Char})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, typeof(identity), Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.run), Base.Cmd, Tuple{Base.DevNull, Base.DevNull, Base.DevNull}})
precompile(Tuple{typeof(Base.setdiff), Array{DataType, 1}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, 1}, Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, Documenter.Utilities.Markdown2.Paragraph, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Documenter.Utilities.Markdown2.MarkdownInlineNode, 1}, Documenter.Utilities.Markdown2.CodeSpan, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Documenter.Utilities.Markdown2.MarkdownInlineNode, 1}, Documenter.Utilities.Markdown2.Text, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.SectionToken, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.TagToken, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.TextToken, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, IonBase.ComoniconFiles, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.CompatHelper, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.Git, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.License, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.ProjectFile, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.Readme, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.SrcDir, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.TagBot, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PkgTemplates.Plugin, 1}, PkgTemplates.Tests, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, PkgTemplates.Secret, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Pkg.Types.PackageInfo}, Pkg.Types.PackageInfo, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{IonBase.ComoniconFiles}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.CompatHelper}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.Git}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.License}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.ProjectFile}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.Readme}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.SrcDir}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.TagBot}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Nothing}, Nothing, Type{PkgTemplates.Tests}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, PkgTemplates.Secret, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Module, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{PkgTemplates.Plugin, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Tuple{AbstractString}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Tuple{String}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Union{}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Int, Int})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Nothing}, Int, Int})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Base.Dict{String, Array{String, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Base.Dict{String, Base.UUID}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Base.UUID, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, OrderedCollections.OrderedDict{String, Integer}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Bool}, Bool, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Integer}, Int64, String})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Nothing, 1}, 1}, Array{Array{Nothing, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Documenter.Utilities.DOM.Node, 1}, Array{Documenter.Utilities.DOM.Node, 1}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Documenter.Utilities.Markdown2.CodeBlock, 1}, Documenter.Utilities.Markdown2.Paragraph, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Documenter.Utilities.Markdown2.Heading, 1}, Documenter.Utilities.Markdown2.Paragraph, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Documenter.Utilities.Markdown2.Paragraph, 1}, Documenter.Utilities.Markdown2.Heading, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Markdown.Code, 1}, Markdown.Paragraph, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Markdown.Paragraph, 1}, Markdown.List, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Nothing, 1}, Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Union{Nothing, Array{Nothing, 1}}, 1}, Array{Array{Nothing, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), LibGit2.GitCredential, Symbol, Base.SecretBuffer})
precompile(Tuple{typeof(Base.setproperty!), LibGit2.GitCredential, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), Markdown.MD, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), Markdown.MD, Symbol, Array{Markdown.MD, 1}})
precompile(Tuple{typeof(Base.setproperty!), Markdown.MD, Symbol, Array{Markdown.Paragraph, 1}})
precompile(Tuple{typeof(Base.setproperty!), Mustache.SectionToken, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Cmd})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.show), IO, Base.Docs.Binding})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Documenter.Utilities.Markdown2._convert_block), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(GitHub.unwrap_union_types), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Union{Char, Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.typeintersect), Int, Int})
precompile(Tuple{typeof(Base.union), Array{Union{Nothing, Base.UUID}, 1}, Array{Union{Nothing, Base.UUID}, 1}})
precompile(Tuple{typeof(Base.union), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Resolve.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.values), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.values), OrderedCollections.OrderedDict{String, Integer}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}})
precompile(Tuple{typeof(Base.vect), Base.Docs.DocStr})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Int})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}})
precompile(Tuple{typeof(Base.vect), Module, Module})
precompile(Tuple{typeof(Base.vect), Module})
precompile(Tuple{typeof(Base.vect), PkgTemplates.Readme, Int})
precompile(Tuple{typeof(Base.vect), Type{PkgTemplates.Documenter{PkgTemplates.GitHubActions}}, DataType})
precompile(Tuple{typeof(Base.write), Base.Process, Char})
precompile(Tuple{typeof(Base.write), Base.Process, String, String, Int})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Comonicon.PATH.project), Module, String, String})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{String, 1}}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{Any, Any}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Array{String, 1}}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Base.UUID}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, String}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, OrderedCollections.OrderedDict{String, Any}, Array{String, 1}})
isdefined(Pkg, Symbol("##_print#9")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, typeof(identity), typeof(Pkg.TOML._print), Base.IOStream, OrderedCollections.OrderedDict{String, Integer}, Array{String, 1}})
isdefined(Pkg, Symbol("##check_artifacts_downloaded#53")) && precompile(Tuple{getfield(Pkg.Operations, Symbol("##check_artifacts_downloaded#53")), Pkg.BinaryPlatforms.MacOS, typeof(Pkg.Operations.check_artifacts_downloaded), String})
isdefined(Pkg, Symbol("##develop#15")) && precompile(Tuple{getfield(Pkg.API, Symbol("##develop#15")), Nothing, Nothing, Nothing, Nothing, Nothing, String, Pkg.Types.PackageMode, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.develop)})
isdefined(Pkg, Symbol("##develop#83")) && precompile(Tuple{getfield(Pkg.API, Symbol("##develop#83")), Bool, Pkg.Types.PreserveLevel, Pkg.BinaryPlatforms.MacOS, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.develop), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
isdefined(Pkg, Symbol("##download_artifacts#49")) && precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_artifacts#49")), Pkg.BinaryPlatforms.MacOS, Bool, typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
isdefined(Pkg, Symbol("##ensure_all_artifacts_installed#47")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_all_artifacts_installed#47")), Pkg.BinaryPlatforms.Platform, Nothing, Bool, Bool, Bool, typeof(Pkg.Artifacts.ensure_all_artifacts_installed), String})
isdefined(Pkg, Symbol("##ensure_artifact_installed#42")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
isdefined(Pkg, Symbol("##ensure_artifact_installed#42")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
isdefined(Pkg, Symbol("##extract_all_hashes#48")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##extract_all_hashes#48")), Pkg.BinaryPlatforms.Platform, Nothing, Bool, typeof(Pkg.Artifacts.extract_all_hashes), String})
isdefined(Pkg, Symbol("##instantiate#170")) && precompile(Tuple{getfield(Pkg.API, Symbol("##instantiate#170")), Nothing, Bool, Bool, Pkg.BinaryPlatforms.MacOS, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.instantiate), Pkg.Types.Context})
isdefined(Pkg, Symbol("##parse_toml#10")) && precompile(Tuple{getfield(Pkg.Types, Symbol("##parse_toml#10")), Bool, typeof(Pkg.Types.parse_toml), String, String})
isdefined(Pkg, Symbol("##query_override#7")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
isdefined(Pkg, Symbol("#_print##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{Any, Any}, Array{String, 1}})
isdefined(Pkg, Symbol("#_print##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Array{String, 1}}, Array{String, 1}})
isdefined(Pkg, Symbol("#_print##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Base.UUID}, Array{String, 1}})
isdefined(Pkg, Symbol("#_print##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, String}, Array{String, 1}})
isdefined(Pkg, Symbol("#_print##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, OrderedCollections.OrderedDict{String, Integer}, Array{String, 1}})
isdefined(Pkg, Symbol("#artifact_meta##kw")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
isdefined(Pkg, Symbol("#ensure_artifact_installed##kw")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform, :verbose, :quiet_download), Tuple{Pkg.BinaryPlatforms.MacOS, Bool, Bool}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
isdefined(Pkg, Symbol("#ensure_artifact_installed##kw")) && precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
isdefined(Pkg, Symbol("#print_status##kw")) && precompile(Tuple{getfield(Pkg.Operations, Symbol("#print_status##kw")), NamedTuple{(:diff,), Tuple{Bool}}, typeof(Pkg.Operations.print_status), Pkg.Types.Context, Pkg.Types.Context, Symbol, Array{Union{Nothing, Base.UUID}, 1}, Array{Union{Nothing, String}, 1}})
isdefined(Pkg, Symbol("#print_status##kw")) && precompile(Tuple{getfield(Pkg.Operations, Symbol("#print_status##kw")), NamedTuple{(:manifest, :diff), Tuple{Bool, Bool}}, typeof(Pkg.Operations.print_status), Pkg.Types.Context, Pkg.Types.Context, Symbol, Array{Union{Nothing, Base.UUID}, 1}, Array{Union{Nothing, String}, 1}})
isdefined(Pkg, Symbol("#printvalue##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
isdefined(Pkg, Symbol("#printvalue##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
isdefined(Pkg, Symbol("#printvalue##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Base.UUID})
isdefined(Pkg, Symbol("#printvalue##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Base.VersionNumber})
isdefined(Pkg, Symbol("#printvalue##kw")) && precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Int64})
precompile(Tuple{typeof(Pkg.API.instantiate), Pkg.Types.Context})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Operations.print_diff), Pkg.Types.Context, Nothing, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.print_diff), Pkg.Types.Context, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.GenericIOBuffer{Array{UInt8, 1}}}, Pkg.TOML.Table, String, Bool, Int64})
precompile(Tuple{typeof(Pkg.TOML.print), Base.IOStream, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.TTY, Symbol, String, Bool})
precompile(Tuple{typeof(Pkg.Types.semver_interval), Base.RegexMatch})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:fragment, :title, :category, :text), Tuple{String, String, String, String}}, Type{Documenter.Writers.HTMLWriter.SearchRecord}, Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :uuid, :version, :ispackage, :dependencies, :path), Tuple{String, Base.UUID, Base.VersionNumber, Bool, Base.Dict{String, Base.UUID}, String}}, Type{Pkg.Types.ProjectInfo}})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.Types.PackageInfo}})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.Types.PackageInfo}})
isdefined(Core, Symbol("#Type##kw")) && precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:prettyurls,), Tuple{Bool}}, Type{Documenter.Writers.HTMLWriter.HTML}})
precompile(Tuple{typeof(Markdown.blocktex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.plain), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(IonCLI.command_main), Array{String, 1}})
isdefined(PkgTemplates, Symbol("##Template#1")) && precompile(Tuple{getfield(PkgTemplates, Symbol("##Template#1")), Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:dir, :user, :plugins), Tuple{String, String, Array{PkgTemplates.Plugin, 1}}}}, Type{PkgTemplates.Template}})
isdefined(PkgTemplates, Symbol("##Template#1")) && precompile(Tuple{getfield(PkgTemplates, Symbol("##Template#1")), Bool, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:dir, :user), Tuple{String, String}}}, Type{PkgTemplates.Template}})
precompile(Tuple{PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.add_test_dependency), String})
precompile(Tuple{typeof(PkgTemplates.badges), IonBase.ComoniconFiles, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.CompatHelper, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.Git, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.License, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.ProjectFile, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.Readme, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.SrcDir, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.TagBot, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.badges), PkgTemplates.Tests, PkgTemplates.Template, String})
precompile(Tuple{typeof(PkgTemplates.default_authors)})
precompile(Tuple{typeof(PkgTemplates.default_file), String, String})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{IonBase.ComoniconFiles}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.CompatHelper}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.Git}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.License}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.ProjectFile}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.Readme}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.SrcDir}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.TagBot}})
precompile(Tuple{typeof(PkgTemplates.getplugin), PkgTemplates.Template, Type{PkgTemplates.Tests}})
precompile(Tuple{typeof(PkgTemplates.gitignore), IonBase.ComoniconFiles})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.CompatHelper})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.Git})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.License})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.ProjectFile})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.Readme})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.SrcDir})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.TagBot})
precompile(Tuple{typeof(PkgTemplates.gitignore), PkgTemplates.Tests})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.AppVeyor}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.BlueStyleBadge}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.CirrusCI}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.Codecov}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.ColPracBadge}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.Coveralls}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.Documenter{PkgTemplates.GitHubActions}}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.Documenter{PkgTemplates.GitLabCI}}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.Documenter{PkgTemplates.TravisCI}}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.DroneCI}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.GitHubActions}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.GitLabCI}})
precompile(Tuple{typeof(PkgTemplates.hasplugin), PkgTemplates.Template, Type{PkgTemplates.TravisCI}})
precompile(Tuple{typeof(PkgTemplates.render_file), String, Base.Dict{String, Any}, Tuple{String, String}})
isdefined(HTTP, Symbol("##get#12")) && precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}}, typeof(HTTP.get), HTTP.URIs.URI, Int})
isdefined(HTTP, Symbol("##newconnection#25")) && precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception), Tuple{Nothing, Bool, Bool, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{Int}, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
isdefined(HTTP, Symbol("##request#1")) && precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{Int}, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Nothing, Bool, Bool, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
isdefined(HTTP, Symbol("#get##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#get##kw")), NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}, typeof(HTTP.get), HTTP.URIs.URI, Int})
isdefined(HTTP, Symbol("#getconnection##kw")) && precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#getconnection##kw")), NamedTuple{(:reuse_limit, :iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Int64, Nothing, Bool, Bool, Bool, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
isdefined(HTTP, Symbol("#request##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Nothing, Bool, Bool, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
isdefined(HTTP, Symbol("#request##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:iofunction, :reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Nothing, Bool, Bool, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
isdefined(HTTP, Symbol("#request##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:reached_redirect_limit, :redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
isdefined(HTTP, Symbol("#request##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}, typeof(HTTP.request), String, HTTP.URIs.URI, Base.Dict{String, String}})
isdefined(HTTP, Symbol("#request##kw")) && precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:redirect, :status_exception, :idle_timeout), Tuple{Bool, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{Int}, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Bool})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{Int}, String, String, Int64, Bool, Bool})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}, Int64, Int64})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
isdefined(IonBase, Symbol("#create##kw")) && precompile(Tuple{getfield(IonBase, Symbol("#create##kw")), NamedTuple{(:user, :template), Tuple{String, String}}, typeof(IonBase.create), String})
isdefined(IonBase, Symbol("#create##kw")) && precompile(Tuple{getfield(IonBase, Symbol("#create##kw")), NamedTuple{(:user,), Tuple{String}}, typeof(IonBase.create), String})
isdefined(IonBase, Symbol("#fetch_repo##kw")) && precompile(Tuple{getfield(IonBase, Symbol("#fetch_repo##kw")), NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}, typeof(IonBase.fetch_repo), Pkg.Types.RegistrySpec, Base.Dict{String, Any}})
isdefined(IonBase, Symbol("#fetch_repo_from_url##kw")) && precompile(Tuple{getfield(IonBase, Symbol("#fetch_repo_from_url##kw")), NamedTuple{(:auth,), Tuple{GitHub.OAuth2}}, typeof(IonBase.fetch_repo_from_url), String})
precompile(Tuple{typeof(IonBase.clone_package), String})
precompile(Tuple{typeof(IonBase.create_template), IonBase.PDTN{:comonicon}, String, String, Bool})
precompile(Tuple{typeof(IonBase.create_template), IonBase.PDTN{:default}, String, String, Bool})
precompile(Tuple{typeof(IonBase.isurl), String})
precompile(Tuple{typeof(IonBase.print_stars), Base.TTY, GitHub.Repo})
precompile(Tuple{typeof(IonBase.print_stars), GitHub.Repo})
isdefined(JSON, Symbol("##parse#1")) && precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{Int}, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Documenter.Writers.HTMLWriter.SearchRecord, 1}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, typeof(identity), Bool})
precompile(Tuple{typeof(InteractiveUtils._subtypes_in), Array{Module, 1}, Type{Int}})
isdefined(Documenter, Symbol("#deploydocs##kw")) && precompile(Tuple{getfield(Documenter, Symbol("#deploydocs##kw")), NamedTuple{(:repo,), Tuple{String}}, typeof(Documenter.deploydocs)})
isdefined(Documenter, Symbol("#makedocs##kw")) && precompile(Tuple{getfield(Documenter, Symbol("#makedocs##kw")), NamedTuple{(:modules, :format, :pages, :repo, :sitename), Tuple{Array{Module, 1}, Documenter.Writers.HTMLWriter.HTML, Array{Base.Pair{String, String}, 1}, String, String}}, typeof(Documenter.makedocs)})
isdefined(Documenter, Symbol("#mdconvert##kw")) && precompile(Tuple{getfield(Documenter.Writers.HTMLWriter, Symbol("#mdconvert##kw")), NamedTuple{(:droplinks, :footnotes), Tuple{Bool, Array{Markdown.Footnote, 1}}}, typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Any, 1}, Markdown.Link})
isdefined(Documenter, Symbol("#mdconvert##kw")) && precompile(Tuple{getfield(Documenter.Writers.HTMLWriter, Symbol("#mdconvert##kw")), NamedTuple{(:droplinks,), Tuple{Bool}}, typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Any, 1}})
isdefined(Documenter, Symbol("#mdconvert##kw")) && precompile(Tuple{getfield(Documenter.Writers.HTMLWriter, Symbol("#mdconvert##kw")), NamedTuple{(:footnotes,), Tuple{Array{Markdown.Footnote, 1}}}, typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Any, 1}, Markdown.Paragraph})
isdefined(Documenter, Symbol("#mdconvert##kw")) && precompile(Tuple{getfield(Documenter.Writers.HTMLWriter, Symbol("#mdconvert##kw")), NamedTuple{(:footnotes,), Tuple{Array{Markdown.Footnote, 1}}}, typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Markdown.Bold, 1}, Markdown.Paragraph})
isdefined(Documenter, Symbol("#url##kw")) && precompile(Tuple{getfield(Documenter.Utilities, Symbol("#url##kw")), NamedTuple{(:commit,), Tuple{String}}, typeof(Documenter.Utilities.url), String, String})
precompile(Tuple{Documenter.Utilities.DOM.Node, Array{Any, 1}})
precompile(Tuple{Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}})
precompile(Tuple{Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node})
precompile(Tuple{Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Int})
precompile(Tuple{Documenter.Utilities.DOM.Node, String})
precompile(Tuple{Documenter.Utilities.DOM.Tag, Array{Array{Documenter.Utilities.DOM.Node, 1}, 1}})
precompile(Tuple{typeof(Documenter.Anchors.add!), Documenter.Anchors.AnchorMap, Documenter.Utilities.Object, String, String})
precompile(Tuple{typeof(Documenter.CrossReferences.crossref), Documenter.Anchors.Anchor, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.CrossReferences.crossref), Documenter.Documents.DocsNodes, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.CrossReferences.crossref), Markdown.Paragraph, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.DocChecks.nameof), Module})
precompile(Tuple{typeof(Documenter.DocSystem.category), Base.Docs.Binding})
precompile(Tuple{typeof(Documenter.DocSystem.category), UnionAll})
precompile(Tuple{typeof(Documenter.Documents.precedence), Array{Module, 1}})
precompile(Tuple{typeof(Documenter.Documents.precedence), Array{String, 1}})
precompile(Tuple{typeof(Documenter.Documents.precedence), Array{Symbol, 1}})
precompile(Tuple{typeof(Documenter.Documents.walk), typeof(identity), Base.Dict{Symbol, Any}, Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Documents.walk), typeof(identity), Base.Dict{Symbol, Any}, Array{Union{Documenter.Documents.DocsNode, Markdown.Admonition}, 1}})
precompile(Tuple{typeof(Documenter.Documents.walk), typeof(identity), Base.Dict{Symbol, Any}, Documenter.Anchors.Anchor})
precompile(Tuple{typeof(Documenter.Documents.walk), typeof(identity), Base.Dict{Symbol, Any}, Documenter.Documents.DocsNodes})
precompile(Tuple{typeof(Documenter.Documents.walk), typeof(identity), Base.Dict{Symbol, Any}, Documenter.Documents.DocsNode})
precompile(Tuple{typeof(Documenter.Utilities.DOM.data), Tuple{Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.data), Tuple{Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(Documenter.Utilities.DOM.attributes!), Array{Base.Pair{Symbol, String}, 1}, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(Documenter.Utilities.DOM.attributes!), Array{Base.Pair{Symbol, String}, 1}, String})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(Documenter.Utilities.DOM.nodes!), Array{Documenter.Utilities.DOM.Node, 1}, Documenter.Utilities.DOM.Node})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(Documenter.Utilities.DOM.nodes!), Array{Documenter.Utilities.DOM.Node, 1}, String})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Base.Pair{Symbol, String}, 1}, Tuple{String, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Base.Pair{Symbol, String}, 1}, Tuple{String, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Base.Pair{Symbol, String}, 1}, Tuple{String, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Base.Pair{Symbol, String}, 1}, Tuple{String, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Array{Documenter.Utilities.DOM.Node, 1}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Tuple{Array{Array{Documenter.Utilities.DOM.Node, 1}, 1}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Tuple{Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Tuple{Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}, Documenter.Utilities.DOM.Node, Array{Documenter.Utilities.DOM.Node, 1}}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Tuple{Documenter.Utilities.DOM.Node, String, Documenter.Utilities.DOM.Node}})
precompile(Tuple{typeof(Documenter.Utilities.DOM.flatten!), typeof(identity), Array{Documenter.Utilities.DOM.Node, 1}, Tuple{String, Documenter.Utilities.DOM.Node, String, Documenter.Utilities.DOM.Node, String, String}})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Markdown.Header{1}})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Markdown.Header{2}})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Markdown.Paragraph})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code, Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}, Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List, Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD, Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph, Markdown.List})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph, Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.MDFlatten.mdflatten), Markdown.MD})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Markdown.Code})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Markdown.Header{1}})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Markdown.Header{2}})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Markdown.List})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_block), Markdown.Paragraph})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_inline), Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_inline), Markdown.Code})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2._convert_inline), String})
precompile(Tuple{typeof(Documenter.Utilities.Markdown2.walk), typeof(identity), Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.dispatch), Type{Documenter.Expanders.ExpanderPipeline}, Markdown.Code, Int})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.dispatch), Type{Documenter.Expanders.ExpanderPipeline}, Markdown.Header{1}, Int})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.dispatch), Type{Documenter.Expanders.ExpanderPipeline}, Markdown.Header{2}, Int})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.dispatch), Type{Documenter.Expanders.ExpanderPipeline}, Markdown.Paragraph, Int})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.dispatch), Type{Documenter.Writers.FormatSelector}, Documenter.Writers.HTMLWriter.HTML, Int})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.matcher), Type{Documenter.Expanders.AutoDocsBlocks}, Markdown.Code, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.matcher), Type{Documenter.Expanders.DocsBlocks}, Markdown.Code, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.matcher), Type{Documenter.Expanders.MetaBlocks}, Markdown.Code, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.CheckDocument}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.CrossReferences}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.Doctest}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.ExpandTemplates}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.Populate}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.RenderDocument}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Builder.SetupBuildDirectory}, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Expanders.AutoDocsBlocks}, Markdown.Code, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Expanders.ExpanderPipeline}, Markdown.Paragraph, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Expanders.TrackHeaders}, Markdown.Header{1}, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Expanders.TrackHeaders}, Markdown.Header{2}, Documenter.Documents.Page, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.Selectors.runner), Type{Documenter.Writers.HTMLFormat}, Documenter.Writers.HTMLWriter.HTML, Documenter.Documents.Document})
precompile(Tuple{typeof(Documenter.Utilities.doccat), Base.Docs.Binding, Type{Int}})
precompile(Tuple{typeof(Documenter.Utilities.doccat), Base.Docs.Binding, Type{Union{}}})
precompile(Tuple{typeof(Documenter.Utilities.doccat), DataType})
precompile(Tuple{typeof(Documenter.Utilities.doccat), Module})
precompile(Tuple{typeof(Documenter.Utilities.doccat), UnionAll})
precompile(Tuple{typeof(Documenter.Utilities.doccat), typeof(identity)})
precompile(Tuple{typeof(Documenter.Utilities.isabsurl), String})
precompile(Tuple{typeof(Documenter.Utilities.isassign), Expr})
precompile(Tuple{typeof(Documenter.Utilities.linerange), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Documenter.Utilities.newlines), String})
precompile(Tuple{typeof(Documenter.Utilities.print_signature), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Int}})
precompile(Tuple{typeof(Documenter.Utilities.slugify), Documenter.Utilities.Object})
precompile(Tuple{typeof(Documenter.Utilities.srcpath), String, String, String})
precompile(Tuple{typeof(Documenter.Utilities.url), String, String, Module, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.domify), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Documenter.Anchors.Anchor})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.domify), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Documenter.Documents.DocsNodes})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.domify), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Markdown.Paragraph})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.fixlinks!), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Array{Any, 1}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.fixlinks!), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Array{Markdown.Bold, 1}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.fixlinks!), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Markdown.Header{1}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.fixlinks!), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode, Markdown.Header{2}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Any, 1}, Markdown.Header{1}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.mdconvert), Array{Any, 1}, Markdown.Header{2}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.navitem), Documenter.Writers.HTMLWriter.NavMenuContext, Array{Documenter.Documents.NavNode, 1}})
precompile(Tuple{typeof(Documenter.Writers.HTMLWriter.open_output), typeof(identity), Documenter.Writers.HTMLWriter.HTMLContext, Documenter.Documents.NavNode})
precompile(Tuple{typeof(Documenter.Writers.MarkdownWriter.dropheaders), Markdown.Code})
precompile(Tuple{typeof(Documenter.Writers.MarkdownWriter.dropheaders), Markdown.Header{1}})
precompile(Tuple{typeof(Documenter.Writers.MarkdownWriter.dropheaders), Markdown.List})
precompile(Tuple{typeof(Documenter.Writers.MarkdownWriter.dropheaders), Markdown.MD})
precompile(Tuple{typeof(Documenter.Writers.MarkdownWriter.dropheaders), Markdown.Paragraph})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_rng), MbedTLS.CtrDrbg, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{(Base.Dict{K, V} where V) where K}, Base.Pair{String, Array{String, 1}}, (Base.Pair{A, B} where B) where A})
precompile(Tuple{Type{(Base.Dict{K, V} where V) where K}, Base.Pair{String, Nothing}, (Base.Pair{A, B} where B) where A})
precompile(Tuple{Type{Array{Any, 1}}, Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{Type{Array{PkgTemplates.Plugin, 1}}, Array{Any, 1}})
precompile(Tuple{Type{Array{PkgTemplates.Plugin, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Array{Type, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(GitHub.unwrap_union_types), Tuple{Array{Any, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Array{Base.Dict{Any, Any}, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Array{String, 1}}, Base.Pair{String, Bool}, Base.Pair{String, Bool}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}, Base.Pair{String, Nothing}, Base.Pair{String, PkgTemplates.Secret}}})
precompile(Tuple{Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.Filesystem.normpath), Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.strip), Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Documenter.Writers.MarkdownWriter.dropheaders), Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{Base.Dict{String, Array{String, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{OrderedCollections.OrderedDict{String, Integer}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(typeof), Array{PkgTemplates.Plugin, 1}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Any, 1}, Array{Base.Docs.DocStr, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{String, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Base.UUID}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.UUID})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.VersionNumber})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, OrderedCollections.OrderedDict{String, Integer}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{String}, Tuple{UInt64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{Type{Documenter.Documents.Globals}, Module, Base.Dict{Any, Any}})
precompile(Tuple{Type{Documenter.Utilities.Markdown2.List}, Bool, Nothing, Array{Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}, 1}})
precompile(Tuple{Type{Documenter.Utilities.Markdown2.MD}, Array{Documenter.Utilities.Markdown2.MarkdownBlockNode, 1}})
precompile(Tuple{Type{Documenter.Utilities.Markdown2.MD}, Array{Documenter.Utilities.Markdown2.Paragraph, 1}})
precompile(Tuple{Type{Documenter.Utilities.Object}, Base.Docs.Binding, Type{Int}})
precompile(Tuple{Type{GitHub.Owner}, String, Nothing, Nothing, String, Nothing, Nothing, Nothing, String, Int64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, HTTP.URIs.URI, HTTP.URIs.URI, Nothing, Nothing, Nothing, Nothing, Bool})
precompile(Tuple{Type{GitHub.Repo}, Base.Dict{String, Any}})
precompile(Tuple{Type{GitHub.Repo}, String, String, String, String, String, GitHub.Owner, Nothing, Nothing, Int64, Int64, Int64, Int64, Int64, Int64, Int64, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, Dates.DateTime, Dates.DateTime, Dates.DateTime, Bool, Bool, Bool, Bool, Bool, Bool, Base.Dict{String, Any}})
precompile(Tuple{Type{GitHub.Repo}, String, String, String, String, String, GitHub.Owner, Nothing, Nothing, Int64, Int64, Int64, Int64, Int64, Int64, Int64, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, Nothing, Dates.DateTime, Dates.DateTime, Dates.DateTime, Bool, Bool, Bool, Bool, Bool, Bool, Base.Dict{String, Any}})
precompile(Tuple{Type{GitHub.Repo}, String, String, String, String, String, GitHub.Owner, Nothing, Nothing, Int64, Int64, Int64, Int64, Int64, Int64, Int64, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, HTTP.URIs.URI, Nothing, Dates.DateTime, Dates.DateTime, Dates.DateTime, Bool, Bool, Bool, Bool, Bool, Bool, Nothing})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, MbedTLS.SSLContext})
precompile(Tuple{Type{Int32}, UInt64})
precompile(Tuple{Type{LibGit2.GitCredential}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Nothing, Nothing})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{Type{Markdown.MD}, Markdown.MD})
precompile(Tuple{Type{MbedTLS.Entropy}})
precompile(Tuple{Type{Mustache.Context}, Array{String, 1}, Mustache.Context})
precompile(Tuple{Type{Mustache.Context}, Bool, Mustache.Context})
precompile(Tuple{Type{Mustache.Context}, Nothing, Mustache.Context})
precompile(Tuple{Type{Mustache.Context}, PkgTemplates.Secret, Mustache.Context})
precompile(Tuple{Type{NamedTuple{(:commit,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:fragment, :title, :category, :text), T} where T<:Tuple}, Tuple{String, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:modules, :format, :pages, :repo, :sitename), T} where T<:Tuple}, Tuple{Array{Module, 1}, Documenter.Writers.HTMLWriter.HTML, Array{Base.Pair{String, String}, 1}, String, String}})
precompile(Tuple{Type{NamedTuple{(:name, :uuid, :version, :ispackage, :dependencies, :path), T} where T<:Tuple}, Tuple{String, Base.UUID, Base.VersionNumber, Bool, Base.Dict{String, Base.UUID}, String}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Type{NamedTuple{(:platform, :verbose, :quiet_download), T} where T<:Tuple}, Tuple{Pkg.BinaryPlatforms.MacOS, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:prettyurls,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:repo,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:user, :template), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:user,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{Type{PkgTemplates.Template}, Array{Base.SubString{String}, 1}, String, String, Base.VersionNumber, Array{PkgTemplates.Plugin, 1}, String})
precompile(Tuple{Type{String}, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#27")){Base.Dict{String, Any}}, String, Base.VersionNumber})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
